class Solution {
    int searchfirst(vector<int> &arr,int size,int key){
            int start=0;
            int end=size-1;
            int target=key;
            int mid=start+((end-start)/2);
            int ans=-1;
            while(start<=end){
            if(target==arr[mid]){
                ans=mid;
                end=mid-1;
            }
            else if(target<arr[mid]){
                end=mid-1;
            }
            else if(target>arr[mid]){
                start=mid+1;
            }
            mid=start+((end-start)/2);
            }
            return ans;
        }
    int searchlast(vector<int> &arr,int size,int key){
            int start=0;
            int end=size-1;
            int target=key;
            int mid=start+((end-start)/2);
            int ans=-1;
            while(start<=end){
            if(target==arr[mid]){
                ans=mid;
                start=mid+1;
            }
            else if(target<arr[mid]){
                end=mid-1;
            }
            else if(target>arr[mid]){
                start=mid+1;
            }
            mid=start+((end-start)/2);
            }
            return ans;
        }
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> ans;
        ans.push_back(searchfirst(nums,nums.size(),target));
        ans.push_back(searchlast(nums,nums.size(),target));
        return ans;
    }
};
